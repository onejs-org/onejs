#!/usr/bin/env node

var one = require('../lib'),
    puts = require('util').puts,
    buildOptions = {};

var REV = '1.1.0';

var opt = require('optimist'),
    argv = opt
    .options('debug', {})
    .options('tie', {})
    .options('quiet', {})
    .options('verbose', {})
    .options('version', {})
    .options('plain', {})
    .options('help', {})
    .argv;

var HELP = ['usage: onejs [action] [manifest] [options]'
          , ''
          , 'Transforms NodeJS packages into single, stand-alone JavaScript files that can be run at other platforms. See the documentation at http://github.com/azer/onejs for more information.'
          , ''
          , 'actions:'
          , '  build      <manifest> <target>          Generate a stand-alone JavaScript file from specified package. Write output to <target> if given any.'
          , '  server     <manifest> <port> <host>     Publish generated JavaScript file on web. Uses 127.0.0.1:1338 by default.'
          , ''
          , 'options:'
          , '  --debug                                 Enable SourceURLs.'
          , ''
          , '  --dep <module>:[<version>]              Register additional dependecies. e.g: event:*,util:*'
          , '  --alias <alias>:<package name>          Register an alias name for given package. e.g: request:superagent,crypto:crypto-browserify'
          , '  --tie <package name>:<global object>    Create package links to specified global variables. e.g; --tie dom:window.document,jquery:jQuery'
          , '  --exclude <package name>                Do not contain specified dependencies. e.g: --exclude underscore,request '
          , '  --plain                                 Builds the package within a minimalistic template for the packages with single module and no dependencies.'
          , ''
          , '  --quiet                                 Make console output less verbose.'
          , '  --verbose                               Tell what\'s going on by being verbose.'
          , '  --version                               Show version and exit.'
          , '  --help                                  Show help.'
          , ''].join('\n');

function build(){
  var manifest = argv._[1] || 'package.json',
      target   = argv._[2],
      tie      = argv.tie,
      alias    = argv.alias,
      dep      = argv.dep,
      exclude  = argv.exclude,
      options  = {
        target  : argv._[2],
        debug   : argv.debug,
        exclude : undefined,
        plain   : argv.plain,
        tie     : undefined,
        alias   : undefined,
        dep     : undefined
      };

  if(tie){
    options.tie = tie.split(',')
      .filter(function(el){
        return el && ( el.indexOf('=') > -1 || el.indexOf(':') > -1);
      })
      .map(function(el){
        el = el.split(/=|:/);
        return { 'module': el[0], 'to': el[1] };
      });
  }

  if(alias){
    options.alias = alias.split(',')
      .filter(function(el){
        return el && ( el.indexOf('=') > -1 || el.indexOf(':') > -1);
      })
      .map(function(el){
        el = el.split(/=|:/);
        return { 'name': el[0], 'orig': el[1] };
      });
  }
  if(dep){
    dep.split(',')
      .map(function(el){
        el = el.split(/=|:/);
        if (!options.addDeps)
          options.addDeps = {}
        options.addDeps[el[0]] = el[1] || '*';
      });
  }

  exclude && ( options.exclude = exclude.split(',').filter(function(el){ return el && el.length; }) );

  one.main(manifest, options, function(error){
    if(error) throw error;

    process.exit(0);
  });
}

function help(){
  puts(HELP);
  process.exit(0);
}

function server(){
  var manifest = argv._[1] || 'package.json',
      host     = argv._[3] || '127.0.0.1',
      port     = argv._[2] || 1338,
      debug    = argv.debug;

  one.publish({ 'manifestPath':manifest, 'host':host, 'port':port, 'debug': debug });
}

function verbosity(){
  one.verbosity('INFO');
  argv.quiet && one.quiet(true);
  argv.verbose && one.verbose(true);
}

function version(){
  puts('OneJS v' + REV);
  process.exit(0);
}

var action = argv._[0] || 'build';

verbosity();

switch(action){
  case 'build': build(); break;
  case 'server': server(); break;
  default:
    if(argv.version){
      version();
    } else {
      help();
    }
}
